{:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true,
              :exceptions ({:count 16278,
                            :class clojure.lang.ExceptionInfo,
                            :example #jepsen.history.Op{:index 4,
                                                        :time 27637666,
                                                        :type :info,
                                                        :process 0,
                                                        :f :assign,
                                                        :value ["8"],
                                                        :exception {:via [{:type clojure.lang.ExceptionInfo,
                                                                           :message "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:keys [\"8\"], :type \"list_committed_offsets\", :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"list_committed_offsets_ok\"),\n :offsets {(named Str \"key\") (named Int \"offset\")},\n {:k :msg_id} Int,\n :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1,\n :keys [\"8\"],\n :msg_id 1,\n :type \"list_committed_offsets_ok\"}\n\nThis is malformed because:\n\n{:offsets missing-required-key, :keys disallowed-key}\n\nSee doc/protocol.md for more guidance.",
                                                                           :data {:type :malformed-rpc-response,
                                                                                  :body {:in_reply_to 1,
                                                                                         :keys ["8"],
                                                                                         :msg_id 1,
                                                                                         :type "list_committed_offsets_ok"}},
                                                                           :at [slingshot.support$stack_trace
                                                                                invoke
                                                                                "support.clj"
                                                                                201]}],
                                                                    :trace [[slingshot.support$stack_trace
                                                                             invoke
                                                                             "support.clj"
                                                                             201]
                                                                            [maelstrom.client$check_body
                                                                             invokeStatic
                                                                             "client.clj"
                                                                             188]
                                                                            [maelstrom.client$check_body
                                                                             invoke
                                                                             "client.clj"
                                                                             181]
                                                                            [maelstrom.workload.kafka$fn__19319$list_committed_offsets__19320
                                                                             invoke
                                                                             "kafka.clj"
                                                                             146]
                                                                            [maelstrom.workload.kafka$fn__19319$list_committed_offsets__19320
                                                                             invoke
                                                                             "kafka.clj"
                                                                             146]
                                                                            [maelstrom.workload.kafka.Client
                                                                             invoke_BANG_
                                                                             "kafka.clj"
                                                                             208]
                                                                            [jepsen.client.Validate
                                                                             invoke_BANG_
                                                                             "client.clj"
                                                                             83]
                                                                            [jepsen.generator.interpreter.ClientWorker
                                                                             invoke_BANG_
                                                                             "interpreter.clj"
                                                                             65]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             140]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             123]
                                                                            [clojure.core$binding_conveyor_fn$fn__5823
                                                                             invoke
                                                                             "core.clj"
                                                                             2047]
                                                                            [clojure.lang.AFn
                                                                             call
                                                                             "AFn.java"
                                                                             18]
                                                                            [java.util.concurrent.FutureTask
                                                                             run
                                                                             "FutureTask.java"
                                                                             317]
                                                                            [java.util.concurrent.ThreadPoolExecutor
                                                                             runWorker
                                                                             "ThreadPoolExecutor.java"
                                                                             1144]
                                                                            [java.util.concurrent.ThreadPoolExecutor$Worker
                                                                             run
                                                                             "ThreadPoolExecutor.java"
                                                                             642]
                                                                            [java.lang.Thread
                                                                             run
                                                                             "Thread.java"
                                                                             1623]],
                                                                    :cause "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:keys [\"8\"], :type \"list_committed_offsets\", :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"list_committed_offsets_ok\"),\n :offsets {(named Str \"key\") (named Int \"offset\")},\n {:k :msg_id} Int,\n :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1,\n :keys [\"8\"],\n :msg_id 1,\n :type \"list_committed_offsets_ok\"}\n\nThis is malformed because:\n\n{:offsets missing-required-key, :keys disallowed-key}\n\nSee doc/protocol.md for more guidance.",
                                                                    :data {:type :malformed-rpc-response,
                                                                           :body {:in_reply_to 1,
                                                                                  :keys ["8"],
                                                                                  :msg_id 1,
                                                                                  :type "list_committed_offsets_ok"}}},
                                                        :error "indeterminate: Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:keys [\"8\"], :type \"list_committed_offsets\", :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"list_committed_offsets_ok\"),\n :offsets {(named Str \"key\") (named Int \"offset\")},\n {:k :msg_id} Int,\n :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1,\n :keys [\"8\"],\n :msg_id 1,\n :type \"list_committed_offsets_ok\"}\n\nThis is malformed because:\n\n{:offsets missing-required-key, :keys disallowed-key}\n\nSee doc/protocol.md for more guidance."}})},
 :stats {:valid? false,
         :count 16279,
         :ok-count 0,
         :fail-count 0,
         :info-count 16279,
         :by-f {:assign {:valid? false,
                         :count 2050,
                         :ok-count 0,
                         :fail-count 0,
                         :info-count 2050},
                :crash {:valid? false,
                        :count 1,
                        :ok-count 0,
                        :fail-count 0,
                        :info-count 1},
                :poll {:valid? false,
                       :count 7372,
                       :ok-count 0,
                       :fail-count 0,
                       :info-count 7372},
                :send {:valid? false,
                       :count 6856,
                       :ok-count 0,
                       :fail-count 0,
                       :info-count 6856}}},
 :availability {:valid? true, :ok-fraction 0.0},
 :net {:all {:send-count 32558,
             :recv-count 32558,
             :msg-count 32558,
             :msgs-per-op 2.0},
       :clients {:send-count 32558,
                 :recv-count 32558,
                 :msg-count 32558},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? :unknown,
            :error "java.lang.NullPointerException: Cannot invoke \"java.lang.Number.doubleValue()\" because \"x\" is null\n at clojure.lang.Numbers.divide (Numbers.java:3899)\n    jepsen.util$nanos__GT_secs.invokeStatic (util.clj:384)\n    jepsen.util$nanos__GT_secs.invoke (util.clj:384)\n    clojure.core$comp$fn__5876.invoke (core.clj:2586)\n    clojure.core$map$fn__5935.invoke (core.clj:2770)\n    clojure.lang.LazySeq.sval (LazySeq.java:42)\n    clojure.lang.LazySeq.seq (LazySeq.java:51)\n    clojure.lang.RT.seq (RT.java:535)\n    clojure.core$seq__5467.invokeStatic (core.clj:139)\n    clojure.core$map$fn__5935.invoke (core.clj:2763)\n    clojure.lang.LazySeq.sval (LazySeq.java:42)\n    clojure.lang.LazySeq.seq (LazySeq.java:51)\n    clojure.lang.RT.seq (RT.java:535)\n    clojure.core$seq__5467.invokeStatic (core.clj:139)\n    clojure.core$concat$cat__5560$fn__5561.invoke (core.clj:736)\n    clojure.lang.LazySeq.sval (LazySeq.java:42)\n    clojure.lang.LazySeq.seq (LazySeq.java:58)\n    clojure.lang.ChunkedCons.chunkedNext (ChunkedCons.java:59)\n    clojure.lang.ChunkedCons.next (ChunkedCons.java:43)\n    clojure.lang.RT.next (RT.java:713)\n    clojure.core$next__5451.invokeStatic (core.clj:64)\n    clojure.core$print_sequential.invokeStatic (core_print.clj:64)\n    clojure.core$fn__7391.invokeStatic (core_print.clj:174)\n    clojure.core/fn (core_print.clj:174)\n    clojure.lang.MultiFn.invoke (MultiFn.java:234)\n    clojure.core$pr_on.invokeStatic (core.clj:3675)\n    clojure.core$pr_on.invoke (core.clj:3669)\n    clojure.core$print_prefix_map$fn__7414.invoke (core_print.clj:233)\n    clojure.core$print_sequential.invokeStatic (core_print.clj:66)\n    clojure.core$print_prefix_map.invokeStatic (core_print.clj:229)\n    clojure.core$print_map.invokeStatic (core_print.clj:238)\n    clojure.core$fn__7443.invokeStatic (core_print.clj:266)\n    clojure.core/fn (core_print.clj:263)\n    clojure.lang.MultiFn.invoke (MultiFn.java:234)\n    clojure.core$pr_on.invokeStatic (core.clj:3675)\n    clojure.core$pr_on.invoke (core.clj:3669)\n    clojure.core$print_prefix_map$fn__7414.invoke (core_print.clj:233)\n    clojure.core$print_sequential.invokeStatic (core_print.clj:66)\n    clojure.core$print_prefix_map.invokeStatic (core_print.clj:229)\n    clojure.core$print_map.invokeStatic (core_print.clj:238)\n    clojure.core$fn__7443.invokeStatic (core_print.clj:266)\n    clojure.core/fn (core_print.clj:263)\n    clojure.lang.MultiFn.invoke (MultiFn.java:234)\n    clojure.core$pr_on.invokeStatic (core.clj:3675)\n    clojure.core$pr.invokeStatic (core.clj:3678)\n    clojure.core$pr.invoke (core.clj:3678)\n    clojure.lang.AFn.applyToHelper (AFn.java:154)\n    clojure.lang.RestFn.applyTo (RestFn.java:132)\n    clojure.core$apply.invokeStatic (core.clj:667)\n    clojure.core$pr_str.invokeStatic (core.clj:4760)\n    clojure.core$pr_str.doInvoke (core.clj:4760)\n    clojure.lang.RestFn.invoke (RestFn.java:408)\n    slingshot.support$parse_throw_PLUS_.invokeStatic (support.clj:219)\n    slingshot.support$parse_throw_PLUS_.doInvoke (support.clj:207)\n    clojure.lang.RestFn.invoke (RestFn.java:425)\n    clojure.lang.AFn.applyToHelper (AFn.java:156)\n    clojure.lang.RestFn.applyTo (RestFn.java:132)\n    clojure.core$apply.invokeStatic (core.clj:671)\n    clojure.core$apply.invoke (core.clj:662)\n    slingshot.support$throw_fn.invokeStatic (support.clj:237)\n    slingshot.support$throw_fn.doInvoke (support.clj:234)\n    clojure.lang.RestFn.invoke (RestFn.java:445)\n    jepsen.checker.perf$with_range.invokeStatic (perf.clj:385)\n    jepsen.checker.perf$with_range.invoke (perf.clj:379)\n    jepsen.tests.kafka$plot_unseen_BANG_.invokeStatic (kafka.clj:1355)\n    jepsen.tests.kafka$plot_unseen_BANG_.invoke (kafka.clj:1304)\n    jepsen.tests.kafka$checker$reify__19270.check (kafka.clj:2069)\n    jepsen.checker$check_safe.invokeStatic (checker.clj:86)\n    jepsen.checker$check_safe.invoke (checker.clj:79)\n    jepsen.checker$compose$reify__11881$fn__11883.invoke (checker.clj:102)\n    clojure.core$pmap$fn__8552$fn__8553.invoke (core.clj:7089)\n    clojure.core$binding_conveyor_fn$fn__5823.invoke (core.clj:2047)\n    clojure.lang.AFn.call (AFn.java:18)\n    java.util.concurrent.FutureTask.run (FutureTask.java:317)\n    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1144)\n    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:642)\n    java.lang.Thread.run (Thread.java:1623)\n"},
 :valid? false}
